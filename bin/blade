#!/usr/bin/env node

var fs = require('fs'),
	path = require('path'),
	blade = require('../'),
	program = require('commander');
if(!fs.existsSync)
	fs.existsSync = fs.existsSync; //Node 0.6 compatibility

var opts = {};

try {
	var package = JSON.parse(fs.readFileSync(__dirname + "/../package.json") );
	program.version(package.version);
} catch(e) {}

program
	.usage("[options] source_path destination_path")
	.option("-R, --render", "renders the template and outputs HTML (default)")
	.option("-C, --compile", "compile-only: output the compiled template")
	.option("-l, --locals <str>", "JSON string to be used as the locals object")
	.option("-L, --locals-file <file>", "require() path to a module exporting locals obj")
	.option("-o, --compile-opts <str>", "JSON string to be used as the compiler's options")
	.option("-d, --debug", "sets the compiler's debug option")
	.option("-m, --minify", "sets the compiler's minify option")
	.option("--no-include-source", "clears the compiler's includeSource option")

program.on('--help', function() {
	var x = function() {console.log.apply(console, arguments);};
	x("Renders or compiles Blade templates.");
	x("\nIf a filename is `-` instead of an actual path, read from standard input or\nwrite to standard output.");
	x("includeSource compiler option is set by default.");
	x("\nExamples:");
	x("\n\tRender a Blade template to stdout from stdin using the local variables\n\texported in a Node module (i.e. ./locals.js):");
	x("\t$ blade -L ./locals - -");
	x("\n\tRender a Blade template to stdout from stdin using the locals provided");
	x("\t$ blade -l '{\"author\":\"Blake Miner\"}' - -");
	x("\n\tCompile foo.blade and output the minified template to stdout:");
	x("\t$ blade -C -m foo.blade -");
	x("\n\tCompile and minify an entire directory of *.blade files:");
	x("\t$ blade -C -m ./views ./public/views");
	x();
});

var x = {"--cows":"Q293cyBzYXksICJNb28hIg==",
"--cake":"VGhlIGNha2UgaXMgYSBsaWUh",
"--jade":"V2h5IHdvdWxkIHlvdSB3YW50IHRvIGRlY3JlbWVudCBqYWRlIGxpa2UgdGhhdD8gIFRyeSBgKytqYWRlYCBuZXh0IHRpbWUu",
"--carla":"Q2FybGEgaXMgdGhlIGJlc3QgZ2lybCBpbiB0aGUgd2hvbGUgd2lkZSB3b3JsZCwgYW5kIEkgYW0gZ29pbmcgdG8gbWFycnkgaGVyIQ"};
for(var i in x)
	if(process.argv[2] == i) return console.log(new Buffer(x[i], "base64").toString());
if(process.argv[2] == "++jade") throw new Error("This feature doesn't work yet.");

//Process arguments
program.parse(process.argv);
var cOpts = program.compileOpts ? JSON.parse(program.compileOpts) : {'includeSource': program.includeSource};
var render = !program.compile || program.render;
if(program.debug) cOpts.debug = true;
if(program.minify) cOpts.minify = true;
if(program.includeSource === false)
	cOpts.includeSource = false;

var locals;
if(render)
{
	if(program.locals)
		locals = JSON.parse(program.locals);
	else if(program.localsFile)
	{
		program.localsFile = path.resolve('.', program.localsFile);
		try {
			locals = require(program.localsFile);
		}
		catch(e) {
			console.error("Locals file not found:", program.localsFile);
		}
	}
	else
		locals = {};
}

var inFile = program.args[0];
var outFile = program.args[1];

/* turn outFile into a function that accepts the input filename and generates
	a Writable Stream */
var getOutputStream, outStreams = {};
if(outFile == null || outFile == "-")
	getOutputStream = function() {return process.stdout;};
else if(!fs.existsSync(outFile) || !fs.statSync(outFile).isDirectory() )
	getOutputStream = function() {
		if(outStreams[outFile])
			return outStreams[outFile];
		return outStreams[outFile] = fs.createWriteStream(outFile);
	};
else
	getOutputStream = function(inFile) {
		var filename = outFile + "/" + (inFile == null ?
			"blade" : path.basename(inFile, path.extname(inFile) )
		) +	(render ? ".html" : ".js");
		if(outStreams[filename])
			return outStreams[filename];
		return outStreams[filename] = fs.createWriteStream(filename);
	};

//Get input ready
var total = 1, done = 0;
if(inFile == null || inFile == "-")
	generate(process.stdin, getOutputStream(null), cOpts.filename);
else if(!fs.existsSync(inFile) )
	throw new Error("Could not find input file: " + inFile);
else if(!fs.statSync(inFile).isDirectory() )
	generate(fs.createReadStream(inFile), getOutputStream(inFile), path.normalize(inFile) );
else
{
	var files = fs.readdirSync(inFile);
	total = files.length;
	for(var i in files)
		if(path.extname(files[i]) == ".blade")
		{
			var file = inFile + "/" + files[i];
			generate(fs.createReadStream(file),
				getOutputStream(file), path.normalize(file) );
		}
}

//Close all output streams
function cleanup() {
	for(var i in outStreams)
		outStreams[i].end();
}

/* Compile/render the Blade template from the input stream
	and write the output to the output stream, without closing it. */
function generate(input, output, filename)
{
	cOpts.filename = filename;
	var str = "";
	input.resume();
	input.setEncoding('utf8');
	input.on('data', function(chunk) { str += chunk; });
	input.on('end', function() {
		//Compile the template
		blade.compile(str, cOpts, function(err, tmpl) {
			if(err) throw err;
			if(render)
				tmpl(locals, function(err, html) {
					if(err) throw err;
					output.write(html);
					if(++done == total) cleanup();
				});
			else
			{
				output.write(tmpl.toString() );
				if(++done == total) cleanup();
			}
		});
	});
}
